{"version":3,"sources":["Components/TodoForm.js","Components/Todo.js","Components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","input","setInput","moment","time","setTime","timeNow","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","content","text","deadline","format","duration","diff","className","edit","placeholder","onChange","name","ref","defaultValue","allowClear","onClick","Todo","todo","removeTodo","updateTodo","setEdit","map","index","isComplete","key","TodoList","todos","setTodos","timeoutManager","setTimeoutManager","onAlert","timeout","setAlertTodo","manager","cb","setTimeout","openNotification","console","log","placement","notification","info","message","description","test","newTodos","newManager","removeArr","filter","el","clearTimeout","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfe0efa3.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\nimport { TimePicker } from 'antd';\r\nimport moment, { duration } from 'moment';\r\nimport \"./TodoForm.css\"\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState('')\r\n    const [time, setTime] = useState(moment('00:00:00', 'HH:mm:ss'))\r\n    const timeNow = moment()\r\n\r\n    const inputRef = useRef(null)\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            content: {\r\n              text: input,\r\n              deadline: time.format('LTS'),\r\n              duration: time.diff(timeNow,\"seconds\")\r\n            }\r\n        })\r\n        setInput('');\r\n        setTime(moment('00:00:00', 'HH:mm:ss'));  \r\n    };\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit} className='todo-form'>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            placeholder='Update your item'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            ref={inputRef}\r\n            className='todo-input edit'\r\n          />\r\n          <div className=\"row\">\r\n            <TimePicker \r\n              defaultValue={moment('00:00:00', 'HH:mm:ss')} \r\n              className=\"time-picker\"\r\n              value={time}\r\n              allowClear={false}\r\n              onChange={setTime}/>\r\n\r\n            <button onClick={handleSubmit} className='todo-button edit'>\r\n              Update\r\n            </button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            placeholder='Add an action'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            className='todo-input'\r\n            ref={inputRef}\r\n          />\r\n          <div className=\"row\">\r\n            <TimePicker \r\n              defaultValue={moment('00:00:00', 'HH:mm:ss')} \r\n              value={time} \r\n              onChange={setTime}\r\n              allowClear={false}\r\n              className=\"time-picker\"/>\r\n\r\n            <button onClick={handleSubmit} className='todo-button'>\r\n              Add habit\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\nimport \"./Todo.css\"\r\n\r\n\r\nfunction Todo({todo, removeTodo, updateTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    })\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    if(edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate}/>\r\n    }\r\n \r\n    return (\r\n        todo.map((todo,index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index}>\r\n            <div  key={todo.id}>\r\n                {todo.content.text}\r\n            </div>\r\n            <div>\r\n                Deadline: {todo.content.deadline}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine onClick={() => removeTodo(todo)} className='delete-icons'/>\r\n                <TiEdit onClick={() => setEdit({id: todo.id, value: todo.content})} className='edit-icons'/>\r\n            </div>\r\n        </div>\r\n        ))\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React, {useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\nimport Notification from './Notification'\r\nimport \"./TodoList.css\"\r\nimport { notification } from 'antd';\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([])\r\n    const [timeoutManager, setTimeoutManager] = useState({})\r\n\r\n    const addTodo = (todo) => {\r\n        if(!todo.content.text || /^\\s*$/.test(todo.content.text)) {  // validate input \r\n            return;\r\n        }\r\n        if (!todo.content.deadline || /^\\s*$/.test(todo.content.deadline)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos]\r\n        setTodos(newTodos)\r\n        \r\n        const timeout = setAlertTodo(todo, onAlert);\r\n        setTimeoutManager((manager) => {\r\n            if (todo) {\r\n                let newManager = {...manager};\r\n                newManager[todo.id] = timeout;\r\n                return newManager;\r\n            }\r\n        });\r\n    }\r\n    \r\n    const onAlert = (id) => {\r\n        if (!todos[id]){\r\n            return;\r\n        }\r\n        const timeout = setAlertTodo(todos[id], onAlert);\r\n        setTimeoutManager((manager) => {\r\n            manager[id] = timeout;\r\n        });\r\n    }\r\n    const setAlertTodo = (todo, cb) => {\r\n        let manager = setTimeout(() => {\r\n            openNotification(\"bottomRight\", todo);\r\n            cb(todo.id);\r\n        }, todo.content.duration >= 0 ? todo.content.duration * 1000 - 1800000 : todo.content.duration*1000 + 84600000);\r\n        console.log(manager)\r\n        return manager;\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if(!newValue.content.text || /^\\s*$/.test(newValue.content.text)) {\r\n            return;\r\n        }\r\n        setTodos(prev => prev.map(item => (item.id) === todoId ? newValue : item))\r\n        clearTimeout(timeoutManager[todoId])\r\n\r\n        const timeout = setAlertTodo(newValue, onAlert); // update new timeout\r\n        setTimeoutManager((manager) => {\r\n            if (newValue) {\r\n                let newManager = {...manager};\r\n                newManager[newValue.id] = timeout;\r\n                return newManager;\r\n            }\r\n        })\r\n    }\r\n\r\n    const removeTodo = todo => {\r\n        const removeArr=[...todos].filter(el=>el.id !== todo.id)\r\n        setTodos(removeArr)\r\n        clearTimeout(timeoutManager[todo.id])\r\n    }\r\n\r\n    // const completeTodo = id => {\r\n    //     let updatedTodos = todos.map(todo => {\r\n    //         if (todo.id === id) {\r\n    //             todo.isComplete = !todo.isComplete\r\n    //         }\r\n    //         return todo\r\n    //     })\r\n    //     setTodos(updatedTodos)\r\n    // }\r\n\r\n    // const isDeadline = todo => {\r\n    //     if (todo.content.duration <= 30) {\r\n    //         return true;\r\n    //     }\r\n    //     return false;\r\n    // }\r\n\r\n    const openNotification = (placement, todo) => {\r\n        notification.info({\r\n          message: `Notification ${todo.content.text}`,\r\n          description:\r\n            'You have deadline',\r\n          placement,\r\n        });\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"form-heading\">\r\n                <h1>Plan for today</h1>\r\n            </div>\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo todo={todos} removeTodo={removeTodo} updateTodo ={updateTodo}/>\r\n            {/* <Notification notify={isDeadline} todo={todos}/> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport TodoForm from './Components/TodoForm';\r\nimport TodoList from './Components/TodoList';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"reminder-app\">\r\n      <TodoList/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}